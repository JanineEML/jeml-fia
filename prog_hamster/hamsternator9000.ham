/*imperative program*/void main() {
	/*
	 Der Hamster funktioniert aktuell NUR in Relation zu seinem Startfeld (!)
	 D.h. wenn er auf (3,1) initialisiert wird startet die interne Rechnung
	 trz. bei (0,0)
	 */

	folgeSpur();
	laufeZumStart();
}

/*
 Initialisiere globale Variable um die Richtung zu tracken. Hamster dreht sich immer nach links.
 
 0 entspricht Osten bzw. nach rechts
 1 entspricht Norden bzw. nach oben
 2 entspricht Westen bzw. nach links
 3 entspricht Süden bzw. nach unten
 */
int richtung = 0;

void updateRichtung() {
	/*
	 Hilfsfunktion um richtung zu updaten: Bei Drehung nach links, wird richtung um eins erhöht.
	 Nach der Erhöhung wird geprüft ob die Variable größer 3 ist. Da richtung innerhalb des
	 Intervalls [0, 3] bleiben soll wird mit modulo 4 gerechnet (Teilen durch 4, behalte Rest).
	 */
	richtung++;

	// Sobald größer als 3 wird modulo 4 benutzt um wieder auf einem Wert zwischen 0 und 3 zu landen.
	if (richtung > 3) {
		richtung = richtung % 4;
	}
}

// Globale Variablen um Standort zu überprüfen.
int x = 0;
int y = 0;

// Je nachdem in welche Richtung der Hamster blickt wenn er ein Feld
// nach vorne läuft, muss der jeweilge x oder y Wert eins hochzählen.
void updateKoordinaten() {

	// Richtung 0 entspricht Osten, also x+1
	if (richtung == 0) {
		x++;
	}
		
	// Richtung 1 entspricht Norden, also y-1
	else if (richtung == 1) {
		y--;
	}
		
	// Richtung 2 entspricht Westen, also x-1
	else if (richtung == 2) {
		x--;
	}
		
	// Letzter Fall, 3, entspricht Süden, also y+1
	else {
		y++;
	}
}

/* 
 Hamster soll sich x-mal nach links drehen und aktualisiert bei jeder Drehung seine aktuelle Blickrichtung
 */
void linksUmMitUpdate(int anzahlDrehungen) {
	for(int i = 0; i < anzahlDrehungen; i++) {
		linksUm();
		updateRichtung();
	}
}

/* 
 Hamster soll x-mal nach vorne laufen und aktualisiert seine Koordinaten mit. Dafür wird die Funktion
 updateKoordinaten() aufgerufen, welche prüft in welche Richtung der Hamster gerade läuft (Blickrichtung)
 */
void vorMitUpdate(int anzahlFelder) {
	// Zählvariable i um die Schleife zu beenden wenn die vorgegebene 
	int i = 0;
	while (vornFrei() && i < anzahlFelder) {
		vor();
		updateKoordinaten();
		
		i++;
	}
}

/*
 Hamster dreht sich OHNE Aktualisierung der Richtung. Wird nur innerhalb anderer Methoden
 verwendet, wenn er sich danach wieder in die Ausgangsposition wenden soll.
 */
void rechtsUm() {
	linksUm();
	linksUm();
	linksUm();
}

void kehreUm() {
	linksUm();
	linksUm();
}

boolean linksFrei() {
	// Hamster muss sich nach links drehen um vornFrei() aufrufen zu können
	linksUm();
	
	/* 
	 Nach dem Check dreht sich der Hamster wieder zurück
	 Da return die Funktion beendet, muss sich der Hamster
	 vorher zurückdrehen
	 */
	 
	if (vornFrei()) {
		rechtsUm();
		
		return true;
	}
	
	// Über else wird false ausgegeben (muss sich ebenfalls zurückdrehen)
	else {
		rechtsUm();
		
		return false;
	}
}

boolean rechtsFrei() {
	// analog zu linksFrei, dreht sich aber nach rechts
	rechtsUm();
	
	if (vornFrei()) {
		linksUm();
		
		return true;
	}
	
	else {
		linksUm();
		
		return false;
	}
}

void nimmGenau(int anzahlKoerner) {
	for(int i = 0; i < anzahlKoerner; i++) {
		nimm();
	}
}

void nimmAlle() {
	// Nimmt solange Körner auf bis das Feld leer ist
	
	while (kornDa()) {
		nimm();
	}
}

void gibGenau(int anzahlKoerner) {
	for(int i = 0; i < anzahlKoerner; i++) {
		gib();
	}
}

void gibAlle() {
	while (maulLeer() != true) {
		gib();
	}
}

int xRichtung(int xWert) {
	if (xWert < 0) {
		return 2;
	}
	
	else {
		return 0;
	}
}

int yRichtung(int yWert) {
	if (yWert < 0) {
		return 1;
	}
	
	else {
		return 3;
	}
}

void ausrichten(int richtungZiel) {
	/*
	 Der Hamster soll sich in die Zielrichtung drehen. Bei jeder Drehung zählt
	 er die Blickrichtung um 1 hoch (linkUmMitUpdate()). Durch den Abgleich mit
	 der zielRichtung dreht er sich solange bis die beiden Werte gleich sind.
	 */
	
	while (richtungZiel != richtung) {
		linksUmMitUpdate(1);
	}
}

int betrag(int zahl) {
	if (zahl < 0) {
		return zahl * (-1);
	}
	
	else {
		return zahl;
	}
}

void laufeZu(int xZiel, int yZiel) {
	// Wir beginnen mit der x-Richtung
	int xWeg = xZiel - x; // x = aktuelles x, bzw. xStart
	int xBlickrichtung = xRichtung(xWeg);
	
	// Betrag berechnen
	xWeg = betrag(xWeg);
	
	ausrichten(xBlickrichtung);
	vorMitUpdate(xWeg);
	
	// Nun folgt die y-Richtung
	int yWeg = yZiel - y;
	int yBlickrichtung = yRichtung(yWeg);
	
	// Betrag des Weges berechnen
	yWeg = betrag(yWeg);
	
	ausrichten(yBlickrichtung);
	vorMitUpdate(yWeg);
}

void laufeZumStart() {
	laufeZu(0,0);
	
	// Soll sich auch zur ersten Blickrichtung ausrichten (Osten == 0)
	while (richtung != 0) {
		linksUmMitUpdate(1);
	}
}

boolean vornKorn() {
	/*
	 Der Hamster prüft NUR auf seinem aktuellen Feld ob ein Korn vorhanden ist, oder nicht.
	 Daher muss er erst ein Feld nach vorne gehen und dann prüfen.
	 
	 Falls ja:
	 Bleibe stehen und beende den Methodenaufruf.
	 
	 Falls nicht:
	 Kehre zum vorangegangenen Feld zurück, drehe dich zur Ausgangsrichtung.
	 
	 Funktion gibt ein boolean aus, weil diese für Wahrheitschecks benutzt werden soll.
	 */
	 
	vorMitUpdate(1);
	
	// Korn gefunden! Bleibe stehen.
	if (kornDa()) {
		return true;
	}
	
	// Kein Korn gefunden, drehe um und laufe zum Ursprung zurück.
	else {
		linksUmMitUpdate(2); // kehre zum ursprünglichen Feld zurück.
		vorMitUpdate(1);
		linksUmMitUpdate(2); // drehe dich zur Ausgangsrichtung zurück.
		
		return false;
	}
}

boolean sucheKorn() {
	/*
	 Arbeitet relativ zur Blickrichtung drei angrenzende Felder ab:
	 
	 Prüfung 1: In Blickrichtung das Feld vor sich prüfen.
	 Prüfung 2: Nach P1 schaut der Hamster hinter sich, also einmal nach links drehen
	 			um zu testen ob das Feld rechts vom Urpsrung ein Korn hat
	 Prüfung 3: Nach P2 kommt der Hamster vom rechten Feld, schaut also nach links
	 			keine weitere Richtungsanpassung nötig um das linke Feld zu testen
	 Prüfung 4: Es wird NICHT davon ausgegangen, dass hinter dem Ursprung ein Korn liegt,
	 			der vollstängiheit halber wird jedoch geprüft. Muss sich nach rechts drehen
	 */
	
	// Prüfung 1: Feld direkt vorne dran
	if (vornFrei() && vornKorn()) {
		return true; // Methode wird beendet falls wahr
	}
	
	// P2: Falls beim vorderen Feld nichts war dreht sich der Hamster ein Feld weiter nach links
	linksUmMitUpdate(1);
	if (vornFrei() && vornKorn()) {
		return true;
	}
	
	// P3: Hamster überspringt vorerst das Feld hinter sich (Richtung aus welcher er kam)
	linksUmMitUpdate(2);
	if (vornFrei() && vornKorn()) {
		return true;
	}
	
	// P4: Prüfe das hintere Feld
	linksUmMitUpdate(1);
	if (vornFrei() && vornKorn()) {
		return true;
	}
	
	// P4: Kein Feld mit einem Korn gefunden, Hamster bleibt stehen.
	else {
		return false;
	}
}

void folgeSpur() {
	while (sucheKorn()) {
		nimm();
	}
}