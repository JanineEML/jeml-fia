void rechtsUm() {
	linksUm();
	linksUm();
	linksUm();
}

void kehreUm() {
	linksUm();
	linksUm();
}

void nimmGenau(int anzahlKoerner) {
	for(int i = 0; i < anzahlKoerner; i++) {
		nimm();
	}
}

void gibGenau(int anzahlKoerner) {
	for(int i = 0; i < anzahlKoerner; i++) {
		gib();
	}
}

void gibAlle() {
	// if und do war doppelt-gemoppelt und wurde entfernt.

	while (maulLeer() != true) {
		gib();
	}
}

void geheVor(int anzahlFelder) {
	// anzahlFelder ist ein Platzhalter und muss ein Integer (int, Zahl) sein. Dieser Wert
	// wird beim Aufruf der Methode im Programm angegeben: geheVor(5).
	
	// int i = 0 ist die Z hlvariable. Diese z hlt von 0 beginnend zu anzahlFelder hoch
	
	// i < anzahlFelder bis wann gez hlt wird. Sei anzahlFelder = 5. Damit werden 5 Durch-
	// l ufe durchgef hrt: 0, 1, 2, 3, 4.
	// Falls i <= anzahlFelder kommt noch ein Durchlauf hinzu: 0, 1, 2, 3, 4, 5.
	
	// i++ bedeutet dass am Ende jedes Durchlaufs i um 1 erhöht wird. i++ hei t i+1.
	
	for(int i = 0; i < anzahlFelder; i++) {
		vor();
	}
}

void sucheKorn(int anzahlFelder) {
	for(int i = 0; i < anzahlFelder; i++) {
		vor();
		
		// Prüfe ob auf dem neuen Feld ein Korn ist und nehme es auf.

		while(kornDa()) {
			nimm();
		}
	}
}